{"ast":null,"code":"import { addItemToCartFailure, addItemToCartRequest, addItemToCartSuccess, getCartFailure, getCartRequest, getCartSuccess, removeCartItemFailure, removeCartItemRequest, removeCartItemSuccess, updateCartItemFailure, updateCartItemRequest, updateCartItemSuccess } from './cart.action';\nimport { createReducer, on } from \"@ngrx/store\";\nexport const initialState = {\n  cartItems: [],\n  loading: false,\n  error: null,\n  cart: null\n};\nexport const cartReducer = createReducer(initialState, on(addItemToCartRequest, getCartRequest, removeCartItemRequest, updateCartItemRequest, state => ({\n  ...state,\n  loading: true,\n  error: null\n})), on(addItemToCartSuccess, (state, action) => ({\n  ...state,\n  loading: false,\n  cartItems: [...state.cartItems, action.payload]\n})), on(addItemToCartFailure, (state, action) => ({\n  ...state,\n  loading: false,\n  error: action.error\n})), on(getCartSuccess, (state, action) => ({\n  ...state,\n  loading: false,\n  cartItems: action.payload.cartItems,\n  cart: action.payload\n})), on(getCartFailure, (state, action) => ({\n  ...state,\n  loading: false,\n  error: action.error\n})), on(removeCartItemSuccess, (state, action) => ({\n  ...state,\n  loading: false,\n  cartItems: state.cartItems.filter(item => item.id !== action.cartItemId)\n})), on(removeCartItemFailure, (state, action) => ({\n  ...state,\n  loading: false,\n  error: action.error\n})), on(updateCartItemSuccess, (state, action) => ({\n  ...state,\n  loading: false,\n  cartItems: state.cartItems.map(item => item.id == action.payload.id ? action.payload : item)\n})), on(updateCartItemFailure, (state, action) => ({\n  ...state,\n  loading: false,\n  error: action.error\n})));","map":{"version":3,"mappings":"AAAA,SAASA,oBAAoB,EAAEC,oBAAoB,EAAEC,oBAAoB,EAAEC,cAAc,EAAEC,cAAc,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,qBAAqB,EAAEC,qBAAqB,EAAEC,qBAAqB,EAAEC,qBAAqB,EAAEC,qBAAqB,QAAQ,eAAe;AAC1R,SAASC,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAS/C,OAAO,MAAMC,YAAY,GAAc;EACnCC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE;CACT;AAED,OAAO,MAAMC,WAAW,GAAGP,aAAa,CAEpCE,YAAY,EAEZD,EAAE,CAACZ,oBAAoB,EAACG,cAAc,EAAEG,qBAAqB,EAAEG,qBAAqB,EAAGU,KAAK,KAAM;EAC9F,GAAGA,KAAK;EACRJ,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;CACV,CAAC,CAAC,EACHJ,EAAE,CAACX,oBAAoB,EAAE,CAACkB,KAAK,EAAEC,MAAM,MAAM;EACzC,GAAGD,KAAK;EACRJ,OAAO,EAAE,KAAK;EACdD,SAAS,EAAE,CAAC,GAAGK,KAAK,CAACL,SAAS,EAAEM,MAAM,CAACC,OAAO;CACjD,CAAC,CAAC,EACHT,EAAE,CAACb,oBAAoB,EAAE,CAACoB,KAAK,EAAEC,MAAM,MAAM;EACzC,GAAGD,KAAK;EACRJ,OAAO,EAAE,KAAK;EACdC,KAAK,EAAEI,MAAM,CAACJ;CACjB,CAAC,CAAC,EAGHJ,EAAE,CAACR,cAAc,EAAE,CAACe,KAAK,EAAEC,MAAM,MAAM;EACnC,GAAGD,KAAK;EACRJ,OAAO,EAAE,KAAK;EACdD,SAAS,EAAEM,MAAM,CAACC,OAAO,CAACP,SAAS;EACnCG,IAAI,EAAEG,MAAM,CAACC;CAChB,CAAC,CAAC,EACHT,EAAE,CAACV,cAAc,EAAE,CAACiB,KAAK,EAAEC,MAAM,MAAM;EACnC,GAAGD,KAAK;EACRJ,OAAO,EAAE,KAAK;EACdC,KAAK,EAAEI,MAAM,CAACJ;CACjB,CAAC,CAAC,EAGHJ,EAAE,CAACL,qBAAqB,EAAE,CAACY,KAAK,EAAEC,MAAM,MAAM;EAC1C,GAAGD,KAAK;EACRJ,OAAO,EAAE,KAAK;EACdD,SAAS,EAAEK,KAAK,CAACL,SAAS,CAACQ,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,UAAU;CAC5E,CAAC,CAAC,EACHb,EAAE,CAACP,qBAAqB,EAAE,CAACc,KAAK,EAAEC,MAAM,MAAM;EAC1C,GAAGD,KAAK;EACRJ,OAAO,EAAE,KAAK;EACdC,KAAK,EAAEI,MAAM,CAACJ;CACjB,CAAC,CAAC,EAGHJ,EAAE,CAACF,qBAAqB,EAAE,CAACS,KAAK,EAAEC,MAAM,MAAM;EAC1C,GAAGD,KAAK;EACRJ,OAAO,EAAE,KAAK;EACdD,SAAS,EAAEK,KAAK,CAACL,SAAS,CAACY,GAAG,CAAEH,IAAI,IAAKA,IAAI,CAACC,EAAE,IAAIJ,MAAM,CAACC,OAAO,CAACG,EAAE,GAAGJ,MAAM,CAACC,OAAO,GAAGE,IAAI;CAChG,CAAC,CAAC,EACHX,EAAE,CAACJ,qBAAqB,EAAE,CAACW,KAAK,EAAEC,MAAM,MAAM;EAC1C,GAAGD,KAAK;EACRJ,OAAO,EAAE,KAAK;EACdC,KAAK,EAAEI,MAAM,CAACJ;CACjB,CAAC,CAAC,CAEN","names":["addItemToCartFailure","addItemToCartRequest","addItemToCartSuccess","getCartFailure","getCartRequest","getCartSuccess","removeCartItemFailure","removeCartItemRequest","removeCartItemSuccess","updateCartItemFailure","updateCartItemRequest","updateCartItemSuccess","createReducer","on","initialState","cartItems","loading","error","cart","cartReducer","state","action","payload","filter","item","id","cartItemId","map"],"sourceRoot":"","sources":["D:\\project-angular-sale-website\\ecommerce-angular\\src\\app\\State\\Cart\\cart.reducer.ts"],"sourcesContent":["import { addItemToCartFailure, addItemToCartRequest, addItemToCartSuccess, getCartFailure, getCartRequest, getCartSuccess, removeCartItemFailure, removeCartItemRequest, removeCartItemSuccess, updateCartItemFailure, updateCartItemRequest, updateCartItemSuccess } from './cart.action';\r\nimport { createReducer, on } from \"@ngrx/store\"\r\n\r\nexport interface CartState {\r\n    cartItems: any[],\r\n    loading: boolean,\r\n    error: any,\r\n    cart: any\r\n}\r\n\r\nexport const initialState: CartState = {\r\n    cartItems: [],\r\n    loading: false,\r\n    error: null,\r\n    cart: null\r\n}\r\n\r\nexport const cartReducer = createReducer (\r\n\r\n    initialState,\r\n\r\n    on(addItemToCartRequest,getCartRequest, removeCartItemRequest, updateCartItemRequest, (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n    })),\r\n    on(addItemToCartSuccess, (state, action) => ({\r\n        ...state,\r\n        loading: false,\r\n        cartItems: [...state.cartItems, action.payload],\r\n    })),\r\n    on(addItemToCartFailure, (state, action) => ({\r\n        ...state,\r\n        loading: false,\r\n        error: action.error\r\n    })),\r\n\r\n\r\n    on(getCartSuccess, (state, action) => ({\r\n        ...state,\r\n        loading: false,\r\n        cartItems: action.payload.cartItems,\r\n        cart: action.payload\r\n    })),\r\n    on(getCartFailure, (state, action) => ({\r\n        ...state,\r\n        loading: false,\r\n        error: action.error\r\n    })),\r\n\r\n\r\n    on(removeCartItemSuccess, (state, action) => ({\r\n        ...state,\r\n        loading: false,\r\n        cartItems: state.cartItems.filter((item) => item.id !== action.cartItemId)\r\n    })),\r\n    on(removeCartItemFailure, (state, action) => ({\r\n        ...state,\r\n        loading: false,\r\n        error: action.error\r\n    })),\r\n\r\n\r\n    on(updateCartItemSuccess, (state, action) => ({\r\n        ...state,\r\n        loading: false,\r\n        cartItems: state.cartItems.map((item) => item.id == action.payload.id ? action.payload : item)\r\n    })),\r\n    on(updateCartItemFailure, (state, action) => ({\r\n        ...state,\r\n        loading: false,\r\n        error: action.error\r\n    }))\r\n\r\n)"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
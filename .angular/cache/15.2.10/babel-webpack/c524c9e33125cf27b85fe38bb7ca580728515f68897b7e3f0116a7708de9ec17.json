{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { BASE_API_URL } from 'src/app/config/api';\nimport { findProductByCategoryFailure, findProductByCategorySuccess, findProductByIdFailure, findProductByIdSuccess } from './product.action';\nimport { catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nexport class ProductService {\n  getHeader() {\n    const token = localStorage.getItem('jwt');\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n  }\n  constructor(store, http, router, route) {\n    this.store = store;\n    this.http = http;\n    this.router = router;\n    this.route = route;\n    this.apiUrl = BASE_API_URL;\n  }\n  findProductByCategory(reqData) {\n    const {\n      colors,\n      sizes,\n      minPrice,\n      maxPrice,\n      minDiscount,\n      category,\n      stock,\n      sort,\n      pageNumber,\n      pageSize\n    } = reqData;\n    let params = new HttpParams().set('color', colors).set('size', sizes).set('minPrice', minPrice).set('maxPrice', maxPrice).set('minDiscount', minDiscount).set('category', category).set('stock', stock).set('sort', sort).set('pageNumber', pageNumber).set('pageSize', pageSize);\n    const headers = this.getHeader();\n    return this.http.get(`${this.apiUrl}/api/products`, {\n      headers,\n      params\n    }).pipe(map(data => {\n      console.log('products data ', data);\n      return findProductByCategorySuccess({\n        payload: data\n      });\n    }), catchError(error => {\n      return of(findProductByCategoryFailure(error.response && error.response.data.message ? error.response.data.message : error.message));\n    })).subscribe(action => this.store.dispatch(action));\n  }\n  findProductById(productId) {\n    const headers = this.getHeader();\n    return this.http.get(`${this.apiUrl}/api/products/id/${productId}`, {\n      headers\n    }).pipe(map(data => {\n      console.log('products details ', data);\n      return findProductByIdSuccess({\n        payload: data\n      });\n    }), catchError(error => {\n      return of(findProductByIdFailure(error.response && error.response.data.message ? error.response.data.message : error.message));\n    })).subscribe(action => this.store.dispatch(action));\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","BASE_API_URL","findProductByCategoryFailure","findProductByCategorySuccess","findProductByIdFailure","findProductByIdSuccess","catchError","map","of","ProductService","getHeader","token","localStorage","getItem","set","constructor","store","http","router","route","findProductByCategory","reqData","colors","sizes","minPrice","maxPrice","minDiscount","category","stock","sort","pageNumber","pageSize","params","headers","get","apiUrl","pipe","data","console","log","payload","error","response","message","subscribe","action","dispatch","findProductById","productId","factory","providedIn"],"sourceRoot":"","sources":["D:\\project-angular-sale-website\\ecommerce-angular\\src\\app\\State\\Product\\product.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { BASE_API_URL } from 'src/app/config/api';\r\nimport {\r\n  findProductByCategoryFailure,\r\n  findProductByCategorySuccess,\r\n  findProductByIdFailure,\r\n  findProductByIdSuccess,\r\n} from './product.action';\r\nimport { catchError, map, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductService {\r\n  apiUrl = BASE_API_URL;\r\n\r\n  private getHeader(): HttpHeaders {\r\n    const token = localStorage.getItem('jwt');\r\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n  }\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private http: HttpClient,\r\n    private router: Router,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  findProductByCategory(reqData: any) {\r\n    const {\r\n      colors,\r\n      sizes,\r\n      minPrice,\r\n      maxPrice,\r\n      minDiscount,\r\n      category,\r\n      stock,\r\n      sort,\r\n      pageNumber,\r\n      pageSize,\r\n    } = reqData;\r\n\r\n    let params = new HttpParams()\r\n      .set('color', colors)\r\n      .set('size', sizes)\r\n      .set('minPrice', minPrice)\r\n      .set('maxPrice', maxPrice)\r\n      .set('minDiscount', minDiscount)\r\n      .set('category', category)\r\n      .set('stock', stock)\r\n      .set('sort', sort)\r\n      .set('pageNumber', pageNumber)\r\n      .set('pageSize', pageSize);\r\n\r\n    const headers = this.getHeader();\r\n\r\n    return this.http\r\n      .get(`${this.apiUrl}/api/products`, { headers, params })\r\n      .pipe(\r\n        map((data: any) => {\r\n          console.log('products data ', data);\r\n          return findProductByCategorySuccess({ payload: data });\r\n        }),\r\n        catchError((error: any) => {\r\n          return of(\r\n            findProductByCategoryFailure(\r\n              error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n            )\r\n          );\r\n        })\r\n      )\r\n      .subscribe((action) => this.store.dispatch(action));\r\n  }\r\n\r\n  findProductById(productId: any) {\r\n    const headers = this.getHeader();\r\n\r\n    return this.http\r\n      .get(`${this.apiUrl}/api/products/id/${productId}`, { headers })\r\n      .pipe(\r\n        map((data: any) => {\r\n          console.log('products details ', data);\r\n          return findProductByIdSuccess({ payload: data });\r\n        }),\r\n        catchError((error: any) => {\r\n          return of(\r\n            findProductByIdFailure(\r\n              error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n            )\r\n          );\r\n        })\r\n      )\r\n      .subscribe((action) => this.store.dispatch(action));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
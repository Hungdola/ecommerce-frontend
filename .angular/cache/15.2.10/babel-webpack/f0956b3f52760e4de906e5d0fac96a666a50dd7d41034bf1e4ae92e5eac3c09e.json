{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, map, of } from \"rxjs\";\nimport { BASE_API_URL } from \"src/app/config/api\";\nimport { createOrderFailure, createOrderSuccess, getOrderByIdFailure, getOrderByIdSuccess, getOrderHistoryFailure, getOrderHistoryRequest, getOrderHistorySuccess } from \"./order.action\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nexport class OrderService {\n  constructor(store, http, router, route) {\n    this.store = store;\n    this.http = http;\n    this.router = router;\n    this.route = route;\n    this.apiUrl = BASE_API_URL;\n    this.headers = new HttpHeaders({\n      Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n      'Content-Type': 'application/json'\n    });\n  }\n  createOrder(reqData) {\n    console.log(\"create order \", reqData);\n    const url = `${this.apiUrl}/api/orders/`;\n    return this.http.post(url, reqData, {\n      headers: this.headers\n    }).pipe(map(data => {\n      console.log(\"create order \", data);\n      if (data.id) {\n        //step=3\n        this.router.navigate([`/checkout/payment/${data.id}`], {\n          queryParams: {\n            step: '3',\n            order_id: data.id\n          }\n        });\n      }\n      console.log(\"create order -\", data);\n      return createOrderSuccess({\n        order: data\n      });\n    }), catchError(error => {\n      return of(createOrderFailure(error.response && error.response.data.message ? error.response.data.message : error.message));\n    })).subscribe(action => this.store.dispatch(action));\n  }\n  getOrderById(orderId) {\n    console.log(\"get order req \", orderId);\n    const url = `${this.apiUrl}/api/orders/${orderId}`;\n    return this.http.get(url, {\n      headers: this.headers\n    }).pipe(map(data => {\n      console.log(\" order by id \", data);\n      return getOrderByIdSuccess({\n        order: data\n      });\n    }), catchError(error => {\n      return of(getOrderByIdFailure(error.response && error.response.data.message ? error.response.data.message : error.message));\n    })).subscribe(action => this.store.dispatch(action));\n  }\n  getOrderHistory() {\n    const url = `${this.apiUrl}/api/orders/user`;\n    this.store.dispatch(getOrderHistoryRequest());\n    return this.http.get(url, {\n      headers: this.headers\n    }).pipe(map(data => {\n      console.log(\" order history \", data);\n      return getOrderHistorySuccess({\n        orders: data\n      });\n    }), catchError(error => {\n      return of(getOrderHistoryFailure(error.response && error.response.data.message ? error.response.data.message : error.message));\n    })).subscribe(action => this.store.dispatch(action));\n  }\n  getAllOrders() {\n    const url = `${this.apiUrl}/api/orders/user`;\n    this.store.dispatch(getOrderHistoryRequest());\n    return this.http.get(url, {\n      headers: this.headers\n    }).pipe(map(data => {\n      console.log(\" order history \", data);\n      return getOrderHistorySuccess({\n        orders: data\n      });\n    }), catchError(error => {\n      return of(getOrderHistoryFailure(error.response && error.response.data.message ? error.response.data.message : error.message));\n    })).subscribe(action => this.store.dispatch(action));\n  }\n  static #_ = this.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","catchError","map","of","BASE_API_URL","createOrderFailure","createOrderSuccess","getOrderByIdFailure","getOrderByIdSuccess","getOrderHistoryFailure","getOrderHistoryRequest","getOrderHistorySuccess","OrderService","constructor","store","http","router","route","headers","Authorization","localStorage","getItem","createOrder","reqData","console","log","url","apiUrl","post","pipe","data","id","navigate","queryParams","step","order_id","order","error","response","message","subscribe","action","dispatch","getOrderById","orderId","get","getOrderHistory","orders","getAllOrders","factory","providedIn"],"sourceRoot":"","sources":["D:\\project-angular-sale-website\\ecommerce-angular\\src\\app\\State\\Order\\order.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { catchError, map, of } from \"rxjs\";\r\nimport { BASE_API_URL } from \"src/app/config/api\";\r\nimport { createOrderFailure, createOrderSuccess, getOrderByIdFailure, getOrderByIdSuccess, getOrderHistoryFailure, getOrderHistoryRequest, getOrderHistorySuccess } from \"./order.action\";\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n  })\r\nexport class OrderService {\r\n    apiUrl = BASE_API_URL;\r\n    headers: any\r\n  \r\n    constructor(\r\n      private store: Store,\r\n      private http: HttpClient,\r\n      private router: Router,\r\n      private route: ActivatedRoute\r\n    ) {\r\n        this.headers = new HttpHeaders({\r\n            Authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n            'Content-Type': 'application/json',\r\n          });\r\n    }\r\n\r\n    createOrder(reqData: any) {\r\n        console.log(\"create order \", reqData)\r\n        const url = `${this.apiUrl}/api/orders/`\r\n\r\n        return this.http\r\n            .post(url, reqData, {headers: this.headers})\r\n            .pipe(\r\n                map((data: any) => {\r\n                    console.log(\"create order \", data)\r\n                    if(data.id) {\r\n                        //step=3\r\n                        this.router.navigate([`/checkout/payment/${data.id}`], {\r\n                            queryParams: {step: '3', order_id: data.id}\r\n                        })\r\n                    }\r\n                    console.log(\"create order -\", data)\r\n                    return createOrderSuccess({order: data})\r\n                }),\r\n                catchError((error: any) => {\r\n                    return of(\r\n                      createOrderFailure(\r\n                        error.response && error.response.data.message\r\n                          ? error.response.data.message\r\n                          : error.message\r\n                      )\r\n                    );\r\n                  })\r\n                )\r\n            .subscribe((action) => this.store.dispatch(action));\r\n    }\r\n\r\n    getOrderById(orderId: string) {\r\n        console.log(\"get order req \", orderId)\r\n        const url = `${this.apiUrl}/api/orders/${orderId}`\r\n\r\n        return this.http\r\n            .get(url, {headers: this.headers})\r\n            .pipe(\r\n                map((data: any) => {\r\n                    console.log(\" order by id \", data)\r\n                    return getOrderByIdSuccess({order: data})\r\n                }),\r\n                catchError((error: any) => {\r\n                    return of(\r\n                      getOrderByIdFailure(\r\n                        error.response && error.response.data.message\r\n                          ? error.response.data.message\r\n                          : error.message\r\n                      )\r\n                    );\r\n                  })\r\n                )\r\n            .subscribe((action) => this.store.dispatch(action));\r\n    }\r\n\r\n    getOrderHistory() {\r\n        const url = `${this.apiUrl}/api/orders/user`\r\n\r\n        this.store.dispatch(getOrderHistoryRequest())\r\n\r\n        return this.http\r\n            .get(url, {headers: this.headers})\r\n            .pipe(\r\n                map((data: any) => {\r\n                    console.log(\" order history \", data)\r\n                    return getOrderHistorySuccess({orders: data})\r\n                }),\r\n                catchError((error: any) => {\r\n                    return of(\r\n                      getOrderHistoryFailure(\r\n                        error.response && error.response.data.message\r\n                          ? error.response.data.message\r\n                          : error.message\r\n                      )\r\n                    );\r\n                  })\r\n                )\r\n            .subscribe((action) => this.store.dispatch(action));\r\n    }\r\n\r\n    getAllOrders() {\r\n        const url = `${this.apiUrl}/api/orders/user`\r\n\r\n        this.store.dispatch(getOrderHistoryRequest())\r\n\r\n        return this.http\r\n            .get(url, {headers: this.headers})\r\n            .pipe(\r\n                map((data: any) => {\r\n                    console.log(\" order history \", data)\r\n                    return getOrderHistorySuccess({orders: data})\r\n                }),\r\n                catchError((error: any) => {\r\n                    return of(\r\n                      getOrderHistoryFailure(\r\n                        error.response && error.response.data.message\r\n                          ? error.response.data.message\r\n                          : error.message\r\n                      )\r\n                    );\r\n                  })\r\n                )\r\n            .subscribe((action) => this.store.dispatch(action));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { catchError, map, of } from \"rxjs\";\nimport { BASE_API_URL } from \"src/app/config/api\";\nimport { loginFailure, loginSuccess, registerFailure, registerSuccess } from \"./auth.actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nexport class AuthService {\n  constructor(http, store) {\n    this.http = http;\n    this.store = store;\n    this.apiUrl = BASE_API_URL + \"/auth\";\n  }\n  login(loginData) {\n    return this.http.post(`${this.apiUrl}/signin`, loginData).pipe(map(user => {\n      console.log('login user:', user);\n      if (user.jwt) {\n        localStorage.setItem(\"jwt\", user.jwt);\n      }\n      return loginSuccess({\n        user\n      });\n    }), catchError(error => {\n      return of(loginFailure(error.response && error.response.data.message ? error.response.data.message : error.message));\n    })).subscribe(action => this.store.dispatch(action));\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/signup`, user).pipe(map(user => {\n      console.log('register user:', user);\n      if (user.jwt) {\n        localStorage.setItem(\"jwt\", user.jwt);\n      }\n      return registerSuccess({\n        user\n      });\n    }), catchError(error => {\n      return of(registerFailure(error.response && error.response.data.message ? error.response.data.message : error.message));\n    })).subscribe(action => this.store.dispatch(action));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,EAAEC,GAAG,EAAEC,EAAE,QAAQ,MAAM;AAC1C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,YAAY,EAAEC,YAAY,EAAEC,eAAe,EAAEC,eAAe,QAAQ,gBAAgB;;;;AAO7F,OAAM,MAAOC,WAAW;EAIpBC,YAAqBC,IAAgB,EAAUC,KAAY;IAAtC,SAAI,GAAJD,IAAI;IAAsB,UAAK,GAALC,KAAK;IAF5C,WAAM,GAAGR,YAAY,GAAC,OAAO;EAGrC;EAEAS,KAAK,CAACC,SAAc;IAChB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,SAAS,EAAEF,SAAS,CAAC,CAACG,IAAI,CAC1Df,GAAG,CAAEgB,IAAS,IAAI;MACdC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,IAAI,CAAC;MAChC,IAAGA,IAAI,CAACG,GAAG,EAAE;QACTC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEL,IAAI,CAACG,GAAG,CAAC;;MAGzC,OAAOf,YAAY,CAAC;QAACY;MAAI,CAAC,CAAC;IAC/B,CAAC,CAAC,EACFjB,UAAU,CAAEuB,KAAK,IAAI;MACjB,OAAOrB,EAAE,CACLE,YAAY,CACRmB,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,GAAGH,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,GAAEH,KAAK,CAACG,OAAO,CAC7F,CACJ;IACL,CAAC,CAAC,CACL,CAACC,SAAS,CAAEC,MAAM,IAAK,IAAI,CAACjB,KAAK,CAACkB,QAAQ,CAACD,MAAM,CAAC,CAAC;EACxD;EAEAE,QAAQ,CAACb,IAAS;IACd,OAAO,IAAI,CAACP,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,SAAS,EAAEE,IAAI,CAAC,CAACD,IAAI,CACrDf,GAAG,CAAEgB,IAAS,IAAI;MACdC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC;MACnC,IAAGA,IAAI,CAACG,GAAG,EAAE;QACTC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEL,IAAI,CAACG,GAAG,CAAC;;MAGzC,OAAOb,eAAe,CAAC;QAACU;MAAI,CAAC,CAAC;IAClC,CAAC,CAAC,EACFjB,UAAU,CAAEuB,KAAK,IAAI;MACjB,OAAOrB,EAAE,CACLI,eAAe,CACXiB,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,GAAGH,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,GAAEH,KAAK,CAACG,OAAO,CAC7F,CACJ;IACL,CAAC,CAAC,CACL,CAACC,SAAS,CAAEC,MAAM,IAAK,IAAI,CAACjB,KAAK,CAACkB,QAAQ,CAACD,MAAM,CAAC,CAAC;EACxD;EAAC;qBA7CQpB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAuB,SAAXvB,WAAW;IAAAwB,YAJR;EAAM","names":["catchError","map","of","BASE_API_URL","loginFailure","loginSuccess","registerFailure","registerSuccess","AuthService","constructor","http","store","login","loginData","post","apiUrl","pipe","user","console","log","jwt","localStorage","setItem","error","response","data","message","subscribe","action","dispatch","register","factory","providedIn"],"sourceRoot":"","sources":["D:\\project-angular-sale-website\\ecommerce-angular\\src\\app\\State\\Auth\\auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { catchError, map, of } from \"rxjs\";\r\nimport { BASE_API_URL } from \"src/app/config/api\";\r\nimport { loginFailure, loginSuccess, registerFailure, registerSuccess } from \"./auth.actions\";\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n\r\n})\r\n\r\nexport class AuthService {\r\n\r\n    private apiUrl = BASE_API_URL+\"/auth\"\r\n\r\n    constructor( private http: HttpClient, private store: Store) {\r\n    }\r\n\r\n    login(loginData: any) {\r\n        return this.http.post(`${this.apiUrl}/signin`, loginData).pipe(\r\n            map((user: any) => {\r\n                console.log('login user:', user)\r\n                if(user.jwt) {\r\n                    localStorage.setItem(\"jwt\", user.jwt)\r\n                }\r\n\r\n                return loginSuccess({user})\r\n            }),\r\n            catchError((error) => {\r\n                return of(\r\n                    loginFailure(\r\n                        error.response && error.response.data.message ? error.response.data.message: error.message\r\n                    )\r\n                )\r\n            })\r\n        ).subscribe((action) => this.store.dispatch(action))\r\n    }\r\n\r\n    register(user: any) {\r\n        return this.http.post(`${this.apiUrl}/signup`, user).pipe(\r\n            map((user: any) => {\r\n                console.log('register user:', user)\r\n                if(user.jwt) {\r\n                    localStorage.setItem(\"jwt\", user.jwt)\r\n                }\r\n\r\n                return registerSuccess({user})\r\n            }),\r\n            catchError((error) => {\r\n                return of(\r\n                    registerFailure(\r\n                        error.response && error.response.data.message ? error.response.data.message: error.message\r\n                    )\r\n                )\r\n            })\r\n        ).subscribe((action) => this.store.dispatch(action))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}